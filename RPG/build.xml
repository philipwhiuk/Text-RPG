<project name="rpgCore" default="all" basedir="."  xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
    <description>RPG Client</description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="docs" location="docs" />
  <property name="lib" location="lib"/>
	<target name="all" depends="clean, dist, test-junit" />
    <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${lib}"/>    	
  </target>
  <target name="compile" depends="init, resolve"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac includeantruntime="false" srcdir="${src}" classpathref="compile.path" destdir="${build}"/>
  </target>
  <target name="dist" depends="docs, compile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>
    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/lib/rpgCore-${DSTAMP}.jar" basedir="${build}"/>
  </target>
  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${lib}"/>  	
    <delete dir="${dist}"/>
    <delete dir="${docs}" />
  </target>
  <target name="resolve" description="--> retrieve dependencies with ivy">
	<ivy:configure />
	<ivy:resolve file="${ivy.dep.file}" conf="${ivy.configurations}" />
    <ivy:cachepath pathid="compile.path"/>
	<ivy:retrieve pattern="${ivy.retrieve.pattern}" conf="${ivy.configurations}" />
  </target>  
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}" classpathref="compile.path">
      <!-- Define which files / directory should get included, we include all -->
       <fileset dir="${src}">
		<include name="**" />
       </fileset>
    </javadoc>
  </target>  
  <target name="test-junit">
	<junit printsummary="yes" haltonfailure="yes">
	  <classpath>
	    <pathelement location="${build.tests}"/>
	    <pathelement path="${java.class.path}"/>
	  	<pathelement path="compile.path" />
	  </classpath>

	  <formatter type="plain"/>

	  <test name="my.test.TestCase" haltonfailure="no" outfile="result">
	    <formatter type="xml"/>
	  </test>

	  <batchtest fork="yes" todir="${reports.tests}">
	    <fileset dir="${src.tests}">
	      <include name="**/*Test*.java"/>
	      <exclude name="**/AllTests.java"/>
	    </fileset>
	  </batchtest>
	</junit>
  </target>	
</project>